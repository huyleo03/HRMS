/**
 * Workflow Constants
 * Contains all constants used in Workflow module
 */

// Request Types - Map with Vietnamese labels and icons
export const  REQUEST_TYPES = [
  { 
    value: 'Leave', 
    label: 'ƒê∆°n xin ngh·ªâ ph√©p', 
    icon: 'üèñÔ∏è',
    description: 'ƒê∆°n xin ngh·ªâ ph√©p, ngh·ªâ ·ªëm, ngh·ªâ vi·ªác ri√™ng'
  },
  { 
    value: 'Overtime', 
    label: 'ƒê∆°n l√†m th√™m gi·ªù', 
    icon: '‚è∞',
    description: 'ƒêƒÉng k√Ω l√†m th√™m gi·ªù, l√†m ngo√†i gi·ªù'
  },
  { 
    value: 'RemoteWork', 
    label: 'ƒê∆°n l√†m vi·ªác t·ª´ xa', 
    icon: 'üè†',
    description: 'ƒêƒÉng k√Ω l√†m vi·ªác t·ª´ xa, work from home'
  },
  { 
    value: 'Resignation', 
    label: 'ƒê∆°n xin th√¥i vi·ªác', 
    icon: 'üëã',
    description: 'ƒê∆°n xin ngh·ªâ vi·ªác, th√¥i vi·ªác'
  },
  { 
    value: 'BusinessTrip', 
    label: 'ƒê∆°n c√¥ng t√°c', 
    icon: '‚úàÔ∏è',
    description: 'ƒêƒÉng k√Ω ƒëi c√¥ng t√°c, ƒëi c√¥ng vi·ªác'
  },
  { 
    value: 'Equipment', 
    label: 'ƒê∆°n y√™u c·∫ßu thi·∫øt b·ªã', 
    icon: 'üíª',
    description: 'Y√™u c·∫ßu c·∫•p ph√°t thi·∫øt b·ªã l√†m vi·ªác'
  },
  { 
    value: 'ITSupport', 
    label: 'ƒê∆°n h·ªó tr·ª£ IT', 
    icon: 'üîß',
    description: 'Y√™u c·∫ßu h·ªó tr·ª£ k·ªπ thu·∫≠t, IT'
  },
  { 
    value: 'HRDocument', 
    label: 'ƒê∆°n y√™u c·∫ßu t√†i li·ªáu HR', 
    icon: 'üìÑ',
    description: 'Y√™u c·∫ßu gi·∫•y t·ªù, t√†i li·ªáu nh√¢n s·ª±'
  },
  { 
    value: 'Expense', 
    label: 'ƒê∆°n chi ph√≠', 
    icon: 'üí∞',
    description: 'ƒê∆°n ho√†n ·ª©ng chi ph√≠, thanh to√°n'
  },
  { 
    value: 'Other', 
    label: 'ƒê∆°n kh√°c', 
    icon: 'üìã',
    description: 'C√°c lo·∫°i ƒë∆°n kh√°c'
  },
];

// Approver Types - Three main types as per business rules
export const APPROVER_TYPES = [
  {
    value: 'DIRECT_MANAGER',
    label: 'Ng∆∞·ªùi qu·∫£n l√Ω tr·ª±c ti·∫øp',
    description: 'T·ª± ƒë·ªông g√°n cho manager c·ªßa ng∆∞·ªùi g·ª≠i ƒë∆°n (Employee ‚Üí Manager, Manager ‚Üí Admin)',
    icon: 'üë§',
    needsConfig: false,
    configFields: [],
    businessRule: 'N·∫øu Employee g·ª≠i ‚Üí Manager duy·ªát. N·∫øu Manager g·ª≠i ‚Üí Admin duy·ªát.',
  },
  {
    value: 'SPECIFIC_DEPARTMENT_HEAD',
    label: 'Tr∆∞·ªüng ph√≤ng c·ª• th·ªÉ',
    description: 'Ch·ªâ ƒë·ªãnh tr∆∞·ªüng ph√≤ng c·ªßa m·ªôt ph√≤ng ban c·ª• th·ªÉ (v√≠ d·ª•: Tr∆∞·ªüng ph√≤ng K·∫ø to√°n)',
    icon: 'üè¢',
    needsConfig: true,
    configFields: ['departmentId'],
    businessRule: 'D√πng department.managerId ƒë·ªÉ l·∫•y ng∆∞·ªùi duy·ªát',
  },
  {
    value: 'SPECIFIC_USER',
    label: 'Ng∆∞·ªùi d√πng c·ª• th·ªÉ',
    description: 'Ch·ªâ ƒë·ªãnh m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ (v√≠ d·ª•: CEO, Gi√°m ƒë·ªëc)',
    icon: '‚≠ê',
    needsConfig: true,
    configFields: ['approverId'],
    businessRule: 'Hard-coded approver ID, kh√¥ng thay ƒë·ªïi theo ng∆∞·ªùi g·ª≠i',
  },
];

// Workflow Status Colors (for Tag component)
export const WORKFLOW_STATUS_COLORS = {
  active: 'green',
  inactive: 'red',
};

// Workflow Status Labels
export const WORKFLOW_STATUS_LABELS = {
  active: 'ƒêang ho·∫°t ƒë·ªông',
  inactive: 'V√¥ hi·ªáu h√≥a',
};

// Approval Step Validation Rules
export const APPROVAL_STEP_RULES = {
  minSteps: 1,
  maxSteps: 10,
  minLevel: 1,
};

// Helper Functions
export const getRequestTypeLabel = (value) => {
  const found = REQUEST_TYPES.find(t => t.value === value);
  return found ? found.label : value;
};

export const getRequestTypeIcon = (value) => {
  const found = REQUEST_TYPES.find(t => t.value === value);
  return found ? found.icon : 'üìã';
};

export const getRequestTypeDisplay = (value) => {
  const found = REQUEST_TYPES.find(t => t.value === value);
  return found ? `${found.icon} ${found.label}` : value;
};

export const getApproverTypeLabel = (value) => {
  const found = APPROVER_TYPES.find(t => t.value === value);
  return found ? found.label : value;
};

export const getApproverTypeIcon = (value) => {
  const found = APPROVER_TYPES.find(t => t.value === value);
  return found ? found.icon : 'üë§';
};

export const getApproverTypeDisplay = (value) => {
  const found = APPROVER_TYPES.find(t => t.value === value);
  return found ? `${found.icon} ${found.label}` : value;
};

export const getApproverTypeConfig = (value) => {
  return APPROVER_TYPES.find(t => t.value === value);
};

/**
 * Validate if approver type needs configuration
 * @param {string} approverType - Approver type value
 * @returns {boolean} True if needs config fields
 */
export const needsConfiguration = (approverType) => {
  const config = APPROVER_TYPES.find(t => t.value === approverType);
  return config?.needsConfig || false;
};

/**
 * Get required config fields for approver type
 * @param {string} approverType - Approver type value
 * @returns {Array} Array of required field names
 */
export const getRequiredConfigFields = (approverType) => {
  const config = APPROVER_TYPES.find(t => t.value === approverType);
  return config?.configFields || [];
};

/**
 * Validate approval step completeness
 * @param {Object} step - Approval step object
 * @returns {Object} { isValid: boolean, errors: Array }
 */
export const validateApprovalStep = (step) => {
  const errors = [];

  if (!step.level || step.level < APPROVAL_STEP_RULES.minLevel) {
    errors.push('Level kh√¥ng h·ª£p l·ªá');
  }

  if (!step.approverType) {
    errors.push('Ch∆∞a ch·ªçn lo·∫°i ng∆∞·ªùi duy·ªát');
  }

  if (!step.displayName || step.displayName.trim() === '') {
    errors.push('Ch∆∞a nh·∫≠p t√™n hi·ªÉn th·ªã');
  }

  // Check config fields
  if (step.approverType === 'SPECIFIC_DEPARTMENT_HEAD' && !step.departmentId) {
    errors.push('Ch∆∞a ch·ªçn ph√≤ng ban');
  }

  if (step.approverType === 'SPECIFIC_USER' && !step.approverId) {
    errors.push('Ch∆∞a ch·ªçn ng∆∞·ªùi duy·ªát');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
};

/**
 * Validate entire approval flow
 * @param {Array} approvalFlow - Array of approval steps
 * @returns {Object} { isValid: boolean, errors: Array }
 */
export const validateApprovalFlow = (approvalFlow) => {
  const errors = [];

  if (!approvalFlow || approvalFlow.length === 0) {
    errors.push('Lu·ªìng ph√™ duy·ªát ph·∫£i c√≥ √≠t nh·∫•t 1 b∆∞·ªõc');
    return { isValid: false, errors };
  }

  if (approvalFlow.length > APPROVAL_STEP_RULES.maxSteps) {
    errors.push(`Lu·ªìng ph√™ duy·ªát kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° ${APPROVAL_STEP_RULES.maxSteps} b∆∞·ªõc`);
  }

  // Check each step
  approvalFlow.forEach((step, index) => {
    const stepValidation = validateApprovalStep(step);
    if (!stepValidation.isValid) {
      errors.push(`B∆∞·ªõc ${index + 1}: ${stepValidation.errors.join(', ')}`);
    }
  });

  // Check level uniqueness and sequence
  const levels = approvalFlow.map(s => s.level);
  const uniqueLevels = new Set(levels);
  if (uniqueLevels.size !== levels.length) {
    errors.push('C√°c b∆∞·ªõc ph·∫£i c√≥ level duy nh·∫•t');
  }

  return {
    isValid: errors.length === 0,
    errors,
  };
};
